// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHUNK_ANDORA_SCHEMA_H_
#define FLATBUFFERS_GENERATED_CHUNK_ANDORA_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace andora {
namespace schema {

struct Vec2;

struct Chunk;
struct ChunkBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2() {
    memset(static_cast<void *>(this), 0, sizeof(Vec2));
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

struct Chunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChunkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS_X = 4,
    VT_BLOCKS = 6
  };
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  const flatbuffers::Vector<const andora::schema::Vec2 *> *blocks() const {
    return GetPointer<const flatbuffers::Vector<const andora::schema::Vec2 *> *>(VT_BLOCKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_POS_X) &&
           VerifyOffset(verifier, VT_BLOCKS) &&
           verifier.VerifyVector(blocks()) &&
           verifier.EndTable();
  }
};

struct ChunkBuilder {
  typedef Chunk Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(Chunk::VT_POS_X, pos_x, 0.0f);
  }
  void add_blocks(flatbuffers::Offset<flatbuffers::Vector<const andora::schema::Vec2 *>> blocks) {
    fbb_.AddOffset(Chunk::VT_BLOCKS, blocks);
  }
  explicit ChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChunkBuilder &operator=(const ChunkBuilder &);
  flatbuffers::Offset<Chunk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Chunk>(end);
    return o;
  }
};

inline flatbuffers::Offset<Chunk> CreateChunk(
    flatbuffers::FlatBufferBuilder &_fbb,
    float pos_x = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<const andora::schema::Vec2 *>> blocks = 0) {
  ChunkBuilder builder_(_fbb);
  builder_.add_blocks(blocks);
  builder_.add_pos_x(pos_x);
  return builder_.Finish();
}

inline flatbuffers::Offset<Chunk> CreateChunkDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float pos_x = 0.0f,
    const std::vector<andora::schema::Vec2> *blocks = nullptr) {
  auto blocks__ = blocks ? _fbb.CreateVectorOfStructs<andora::schema::Vec2>(*blocks) : 0;
  return andora::schema::CreateChunk(
      _fbb,
      pos_x,
      blocks__);
}

inline const andora::schema::Chunk *GetChunk(const void *buf) {
  return flatbuffers::GetRoot<andora::schema::Chunk>(buf);
}

inline const andora::schema::Chunk *GetSizePrefixedChunk(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<andora::schema::Chunk>(buf);
}

inline bool VerifyChunkBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<andora::schema::Chunk>(nullptr);
}

inline bool VerifySizePrefixedChunkBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<andora::schema::Chunk>(nullptr);
}

inline void FinishChunkBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<andora::schema::Chunk> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedChunkBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<andora::schema::Chunk> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace andora

#endif  // FLATBUFFERS_GENERATED_CHUNK_ANDORA_SCHEMA_H_
