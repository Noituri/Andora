raylib_target = "msvc"

if (is_win && is_clang) {
    raylib_target = "mingw"
} else if (is_linux) {
    raylib_target = "linux"
}


exec_script("//utils/fetch_deps.py", [ raylib_target ])

config("raylib") {
    include_dirs = [
        "//third_party/raylib/include",
        "//third_party/raylib-cpp/include",
    ]

    lib_path = "//third_party/raylib/lib"

    if (is_win) {
        if (is_clang) {
            libs = [
                "$lib_path/libraylib.dll.a",
                "$lib_path/libraylib_static.a",
            ]
        } else {
            libs = [
                "$lib_path/raylib.lib",
                "$lib_path/raylib_static.lib",
            ]
        }
    } else {
        libs = [ "$lib_path/libraylib.so" ]
    }
}

config("entt") {
    include_dirs = [
        "//third_party/entt/single_include/entt",
    ]
}

config("flatbuffers") {
    include_dirs = [
        "//third_party/flatbuffers/include"
    ]
}

if (is_win) {
    copy("raylibdll") {
        sources = [ "//third_party/raylib/bin/raylib.dll" ]
        outputs = [ "$root_out_dir/{{source_file_part}}" ]
    }
} else {
    lib_path = "//third_party/raylib/lib"
    copy("raylibso") {
        sources = [ "$lib_path/libraylib.so.3.0.0", "$lib_path/libraylib.so.301" ]
        outputs = [ "$root_out_dir/{{source_file_part}}" ]
    }
}

copy("resources") {
    sources = [ "//res" ]
    outputs = [ "$root_out_dir/{{source_file_part}}" ]
}

executable("andora") {
    sources = [
        "main.cc",
        "timer.cc",
        "timer.h",
        "physics.cc",
        "physics.h",
        "body.cc",
        "body.h",
        "manifold.cc",
        "manifold.h",
        "components.cc",
        "components.h",
        "entities_handler.cc",
        "entities_handler.h",
        "utils.cc",
        "utils.h",
        "perlin.cc",
        "perlin.h",
        "systems.cc",
        "systems.h",
        "schema_handler.h",
    ]

    include_dirs = [
        "//third_party/include",
        "//schemas/include",
    ]

    configs += [
        ":raylib",
        ":entt",
        ":flatbuffers",
    ]
}
